{"version":3,"sources":["components/TreeViewMenu/ListGroupItem.js","components/TreeViewMenu/index.js","DemoPage/transpose.js","DemoPage/index.js"],"names":["ToggleIcon","styled","_ref","_ref$level","level","position","left","concat","width","height","ListGroupItemWithPadding","ListGroupItem_default","a","_ref2","_ref2$level","paddingLeft","DEFAULT_PADDING","cursor","ListGroupItem","_ref3","_ref3$hasSubItems","hasSubItems","_ref3$isOpen","isOpen","_ref3$level","children","props","Object","objectWithoutProperties","react_default","createElement","Fragment","assign","defaultOnClick","console","warn","TreeViewMenu","state","openNodes","toggleNode","node","_this","includes","setState","filter","openNode","toConsumableArray","getOnClickFunction","onClick","walk","data","_ref2$activeKey","activeKey","_ref2$parent","parent","entries","sort","b","index","reduce","all","_ref4","slicedToArray","nodeName","label","nodes","key","undefined","isActive","currentNode","x","join","onClickFunction","currentItem","TreeViewMenu_ListGroupItem","active","_this$props","this","ListGroup_default","React","Component","transposeSpace","space","navigate","spaceIndex","content","pages","allPages","currentPage","pageIndex","t","u","m","p","path","split","splice","length","newObj","createObjFromKeys","_ref$obj","obj","keys","value","shift","objectSpread","cleanPath","merge_default","transpose","Array","isArray","allSpaces","currentSpace","currentSpacePages","BASE_NAV_URL","process","DemoPage","treeData","processData","history","trimmedPath","log","push","_this$state","components_TreeViewMenu","get_default","withRouter"],"mappings":"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","file":"static/js/1.95d574b9.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'react-emotion';\nimport { ListGroupItem as DefaultListGroupItem } from 'reactstrap';\n\nconst DEFAULT_PADDING = 1.25;\nconst LEVEL_SPACE = 1.25;\nconst ICON_SIZE = 1;\n\nconst ToggleIcon = styled('div')(({ level = 0 }) => ({\n  position: 'absolute',\n  left: `${ICON_SIZE + level * LEVEL_SPACE}rem`,\n  width: `${ICON_SIZE}rem`,\n  height: `${ICON_SIZE}rem`\n}));\n\nconst ListGroupItemWithPadding = styled(DefaultListGroupItem)(\n  ({ level = 0 }) => ({\n    paddingLeft: `${DEFAULT_PADDING + ICON_SIZE + level * LEVEL_SPACE}rem`,\n    cursor: 'pointer'\n  })\n);\n\nconst ListGroupItem = ({\n  hasSubItems = false,\n  isOpen = false,\n  level = 0,\n  children,\n  ...props\n}) => (\n  <>\n    <ListGroupItemWithPadding level={level} {...props}>\n      {hasSubItems && (\n        <ToggleIcon level={level}>{isOpen ? '-' : '+'}</ToggleIcon>\n      )}\n      {children}\n    </ListGroupItemWithPadding>\n  </>\n);\n\nexport default ListGroupItem;\n","import React from 'react';\nimport { ListGroup } from 'reactstrap';\n\nimport ListGroupItem from './ListGroupItem';\n\nconst defaultOnClick = () => console.warn('no behavior defined'); // eslint-disable-line no-console\n\nclass TreeViewMenu extends React.Component {\n  state = { openNodes: [] };\n\n  toggleNode = node => {\n    const { openNodes } = this.state;\n    if (openNodes.includes(node)) {\n      this.setState({\n        openNodes: openNodes.filter(openNode => openNode !== node)\n      });\n    } else {\n      this.setState({ openNodes: [...openNodes, node] });\n    }\n  };\n\n  getOnClickFunction = ({ onClick, node }) => () => {\n    const onClickFn = onClick || defaultOnClick;\n    onClickFn();\n    this.toggleNode(node);\n  };\n\n  walk = ({ data, activeKey = '', parent = '', level = 0, openNodes }) =>\n    Object.entries(data)\n      .sort((a, b) => a[1].index - b[1].index)\n      .reduce((all, [nodeName, node]) => {\n        const { label, onClick, nodes, key } = node;\n        const hasSubItems = nodes !== undefined && nodes !== null;\n        if (!key) return all;\n        const isActive = activeKey === key;\n        const currentNode = [parent, nodeName].filter(x => x).join('/');\n        const isOpen = openNodes.includes(currentNode);\n        const onClickFunction = this.getOnClickFunction({\n          onClick,\n          node: currentNode\n        });\n        const currentItem = (\n          <ListGroupItem\n            onClick={onClickFunction}\n            active={isActive}\n            hasSubItems={hasSubItems}\n            level={level}\n            key={currentNode}\n            isOpen={isOpen}\n          >\n            {label}\n          </ListGroupItem>\n        );\n        return [\n          ...all,\n          currentItem,\n          nodes &&\n            isOpen &&\n            this.walk({\n              data: nodes,\n              activeKey,\n              parent: currentNode,\n              level: level + 1,\n              openNodes\n            })\n        ].filter(x => x);\n      }, []);\n\n  render() {\n    const { data, activeKey } = this.props;\n    const { openNodes } = this.state;\n    return <ListGroup>{this.walk({ data, activeKey, openNodes })}</ListGroup>;\n  }\n}\n\nexport default TreeViewMenu;\n","import { merge } from 'lodash';\n\nconst createObjFromKeys = ({ obj = {}, keys, value }) => {\n  if (keys.length === 1) {\n    obj[keys[0]] = value;\n  } else {\n    const key = keys.shift();\n    obj[key] = obj[key] || {};\n    obj[key].nodes = {\n      ...obj[key].nodes,\n      ...createObjFromKeys({\n        obj: typeof obj[key].nodes === 'undefined' ? {} : obj[key].nodes,\n        keys,\n        value\n      })\n    };\n  }\n\n  return obj;\n};\n\nconst cleanPath = path =>\n  path\n    .split('/')\n    .filter(x => x)\n    .join('/');\n\nconst transposeSpace = ({ space, navigate, spaceIndex }) => {\n  const { content } = space;\n  return content.pages.reduce((allPages, currentPage, pageIndex) => {\n    const {\n      t, // title\n      // c, // category\n      // i, // identifier\n      u, // url\n      // d, // directory\n      m, // is space\n      p // parent page\n    } = currentPage;\n    const path = u.split('/').filter(x => x);\n\n    // if it has a parent page, insert it to have complete nodes\n    if (p) path.splice(path.length - 1, 0, p);\n\n    const newObj = createObjFromKeys({\n      keys: path,\n      value: {\n        label: t,\n        onClick: () => navigate(u),\n        key: cleanPath(u),\n        index: m ? spaceIndex : pageIndex\n      }\n    });\n    return merge(newObj, allPages);\n  }, {});\n};\n\nconst transpose = ({ data, navigate, index }) => {\n  if (Array.isArray(data))\n    return data.reduce((allSpaces, currentSpace, spaceIndex) => {\n      const currentSpacePages = transposeSpace({\n        space: currentSpace,\n        spaceIndex,\n        navigate\n      });\n      return {\n        ...allSpaces,\n        ...currentSpacePages\n      };\n    }, {});\n  return transposeSpace({\n    space: data,\n    spaceIndex: index,\n    navigate\n  });\n};\n\nexport default transpose;\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { get } from 'lodash';\n\nimport TreeViewMenu from '../components/TreeViewMenu';\nimport data from '../data/spaces.json';\nimport transpose from './transpose';\n\nconst BASE_NAV_URL = process.env.REACT_APP_NAVIGATION_PATH || '';\n\nconst cleanPath = path =>\n  path\n    .split('/')\n    .filter(x => x)\n    .join('/');\n\nclass DemoPage extends Component {\n  static getDerivedStateFromProps(props) {\n    const path = get(props, 'location.pathname');\n\n    return { path };\n  }\n\n  state = { path: '', treeData: null };\n\n  componentDidMount() {\n    this.processData();\n  }\n\n  processData = () => {\n    const treeData = transpose({ data, navigate: this.navigate });\n    this.setState({ treeData });\n  };\n\n  navigate = path => {\n    const { history } = this.props;\n    const trimmedPath = cleanPath(path);\n    console.log(`${BASE_NAV_URL}${trimmedPath}`);\n    history.push(`${BASE_NAV_URL}${trimmedPath}`);\n  };\n\n  render() {\n    const { path, treeData } = this.state;\n    const activeKey = cleanPath(path);\n    return treeData && <TreeViewMenu data={treeData} activeKey={activeKey} />;\n  }\n}\n\nexport default withRouter(DemoPage);\n"],"sourceRoot":""}